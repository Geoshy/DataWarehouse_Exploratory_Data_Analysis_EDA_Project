/*
===============================================================================================================
Magnitude Exploration:
    - Compare the measures values across different categories and dimensions. 
    - Which help us to understand the important of the different dimensions and categories.
    - Helps us to generate endless amout of insights.
===============================================================================================================
*/

USE DataWarehouse;
GO

-- (1) Explore total customers by countries:
SELECT
    country,
    COUNT(customer_id) AS total_customers
FROM
    gold.dim_customers
GROUP BY
    country
ORDER BY
    COUNT(customer_id) DESC;

-- (2) Explore total customers by gender:
SELECT
    gender,
    COUNT(customer_id) AS total_customers
FROM 
    gold.dim_customers
GROUP BY
    gender
ORDER BY
    COUNT(customer_id) DESC;

-- (3) Explore total products by category:
SELECT
    category,
    COUNT(product_id) AS total_products
FROM
    gold.dim_products
GROUP BY
    category
ORDER BY
    COUNT(product_id) DESC;

-- (4) Explore the average costs in each category:
SELECT
    category,
    FLOOR(AVG(cost)) AS average_cost
FROM
    gold.dim_products
GROUP BY
    category
ORDER BY
    FLOOR(AVG(cost)) DESC;

-- (5) Explore the total revenue generated for each category:
SELECT
    p.category,
    FORMAT(SUM(fs.sales_amount), 'N2') AS total_revenue
FROM
    gold.fact_sales_details AS fs LEFT JOIN gold.dim_products AS p
    ON fs.product_key = p.product_key
GROUP BY
    p.category
ORDER BY
    SUM(fs.sales_amount) DESC;

-- (6) Explore the total revenue generated by each customer:
SELECT
    c.customer_key,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    FORMAT(SUM(fs.sales_amount), 'N2') AS total_revenue
FROM
    gold.fact_sales_details AS fs LEFT JOIN gold.dim_customers AS c
    ON fs.customer_key = c.customer_key
GROUP BY
    c.customer_key,
    CONCAT(c.first_name, ' ', c.last_name)
ORDER BY
    SUM(fs.sales_amount) DESC;

-- (7) Explore the top (10) most paid customers:
SELECT
    TOP 10
    c.customer_key,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    FORMAT(SUM(fs.sales_amount), 'N2') AS total_revenue
FROM
    gold.fact_sales_details AS fs LEFT JOIN gold.dim_customers AS c
    ON fs.customer_key = c.customer_key
GROUP BY
    c.customer_key,
    CONCAT(c.first_name, ' ', c.last_name)
ORDER BY
    SUM(fs.sales_amount) DESC;

-- (8) Explore the lowest (10) less paid customers:
SELECT
    TOP 10
    c.customer_key,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    FORMAT(SUM(fs.sales_amount), 'N2') AS total_revenue
FROM
    gold.fact_sales_details AS fs LEFT JOIN gold.dim_customers AS c
    ON fs.customer_key = c.customer_key
GROUP BY
    c.customer_key,
    CONCAT(c.first_name, ' ', c.last_name)
ORDER BY
    SUM(fs.sales_amount) ASC;

-- (9) What is the distribution of sold items across countries (total quantity by countries):
SELECT
    c.country,
    SUM(fs.quantity) AS total_sold_items
FROM
    gold.fact_sales_details AS fs LEFT JOIN gold.dim_customers AS c
    ON fs.customer_key = c.customer_key
GROUP BY
    c.country
ORDER BY 
    SUM(fs.quantity) DESC;

-- (10) Explore the total sales of gender in each category:
WITH full_join_cte AS (
    SELECT
        c.gender AS gender,
        p.category AS category,
        fs.sales_amount AS sales_amount
    FROM
        gold.fact_sales_details AS fs LEFT JOIN gold.dim_customers AS c
        ON fs.customer_key = c.customer_key LEFT JOIN gold.dim_products AS p
        ON fs.product_key = p.product_key
    WHERE
        c.gender != 'N/A'
)
SELECT
    gender,
    category,
    FORMAT(SUM(sales_amount), 'N2') AS total_sales
FROM
    full_join_cte
GROUP BY
    gender,
    category;

/*
Age by life cycle groupings refers to the age of a person within general life cycle groupings,
that is, whether he or she is a child, a youth, an adult or a senior. In this context, 
children are considered to be aged from 0 to 14, youth from 15 to 24, adults from 25 to 64 and seniors 65 and over.
*/

-- (11) Explore the age classification of the customers:
-- Age Cycle Classification:
    -- (1) Children (0-14).
    -- (2) Youth (15-24).
    -- (3) Adults (25-64).
    -- (4) Seniors (>64).

WITH customer_age_cte AS (
SELECT
    customer_key,
    DATEDIFF(YEAR, birthdate, GETDATE()) AS age,
    CASE
        WHEN DATEDIFF(YEAR, birthdate, GETDATE()) > 0 AND DATEDIFF(YEAR, birthdate, GETDATE()) <= 14 THEN 'Children'
        WHEN DATEDIFF(YEAR, birthdate, GETDATE()) > 14 AND DATEDIFF(YEAR, birthdate, GETDATE()) <= 24 THEN 'Youth'
        WHEN DATEDIFF(YEAR, birthdate, GETDATE()) > 24 AND DATEDIFF(YEAR, birthdate, GETDATE()) <= 64 THEN 'Adults'
        ELSE 'Seniors'
    END AS age_classification
FROM
    gold.dim_customers
WHERE 
    DATEDIFF(YEAR, birthdate, GETDATE()) < 90
)
SELECT 
    age_classification,
    COUNT(customer_key) AS total_customers
FROM
    customer_age_cte
GROUP BY
    age_classification
ORDER BY
    COUNT(customer_key) DESC;


